version: "2"

services:
  mywebapp:
    build: $PROJECT1
    depends_on:
      - mariadb1
      - drush
    environment:
      VIRTUAL_HOST: $PROJECT1.demoserver.com
    volumes:
      - ./$PROJECT1/:/var/www/html
    volumes_from:
      - drush
    links:
      - mariadb1:mariadb
    restart: always

  mywebapp2:
    build: $PROJECT2
    depends_on:
      - mariadb2
      - drush
    environment:
      VIRTUAL_HOST:  $PROJECT2.demoserver.com
    volumes:
      - ./$PROJECT2/:/var/www/html
    volumes_from:
      - drush
    links:
      - mariadb2:mariadb
    restart: always

  mywebapp3:
    build: $PROJECT3
    depends_on:
      - mariadb3
      - drush
    environment:
      VIRTUAL_HOST:  $PROJECT3.demoserver.com
    volumes:
      - ./$PROJECT3/:/var/www/html
    volumes_from:
      - drush
    links:
      - mariadb3:mariadb
    restart: always

  mariadb1:
    image: mariadb:$MARIADB_TAG
    stop_grace_period: 30s
    environment:
      MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD
      MYSQL_DATABASE: $DB_NAME
      MYSQL_USER: $DB_USER
      MYSQL_PASSWORD: $DB_PASSWORD

  mariadb2:
    image: mariadb:$MARIADB_TAG
    stop_grace_period: 30s
    environment:
      MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD
      MYSQL_DATABASE: $DB_NAME
      MYSQL_USER: $DB_USER
      MYSQL_PASSWORD: $DB_PASSWORD

  mariadb3:
    image: mariadb:$MARIADB_TAG
    stop_grace_period: 30s
    environment:
      MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD
      MYSQL_DATABASE: $DB_NAME
      MYSQL_USER: $DB_USER
      MYSQL_PASSWORD: $DB_PASSWORD

  drush:
    build: $DRUSH_DIR
    container_name: "drush"

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    depends_on:
      - mariadb1
    environment:
      VIRTUAL_HOST: pma.demoserver.com
      MYSQL_USERNAME: root
      MYSQL_ROOT_PASSWORD: root
      PMA_HOSTS: mariadb1, mariadb2, mariadb3
      PMA_ARBITRARY: 1

  nginx-proxy:
    image: jwilder/nginx-proxy
    ports:
      - "8080:80"
      - "4443:443"
    volumes:
      - ./certs:/etc/nginx/certs
      - /var/run/docker.sock:/tmp/docker.sock:ro
    restart: always
    privileged: true
